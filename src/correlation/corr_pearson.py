# Script to calculate pairwise pearson correlations for a large set of genes

import pandas as pd
from scipy.stats import pearsonr
import numpy as np
import pickle as pkl
from multiprocessing import Pool
from itertools import combinations

def calc_pearson(data, gene, gene_list):
    # calculation pairwise pearson correlations for a list of genes
    pearson = pd.DataFrame(0, columns=gene_list, index=gene_list)
    for i, j in combinations(gene_list, 2):
        pearson.loc[i,j] = pearsonr(data.loc[i], data.loc[j])[0]

    pearson += pearson.T
    np.fill_diagonal(pearson.values, 1.0)
    pkl.dump(pearson, open(f"../../TransformedData_DerivedData/correlation_network/corr_coeff_pearson_{gene}_KO.pkl", "wb"))

if __name__ == "__main__":
    df = pd.read_csv("../../TransformedData_DerivedData/norm_count.csv", index_col = 0)
    # Multiindex columns to be (cellline, gene, shRNA, replicate)
    df.columns=pd.MultiIndex.from_tuples([tuple(x.split()[-4:]) for x in df.columns])
    systems = sorted(set(x[1] for x in df.columns))
    genes = sorted(set(x[1] for x in df.columns))
    genes.remove("CTRL")

    # Filter a list of genes by combining the top 100 genes ranked by adjusted p-value in DESeq2
    # and with adjusted p < 0.05
    # DESeq2 results generated by Anna Mathioudaki
    large_genes = []
    for g in genes:
        data = pd.read_csv(f"/scratch/shared/DE_DESeq/CTRL_vs_{g}_results_DESeq.csv", index_col=0)
        large_genes += list(data[data.padj < 0.05].sort_values("padj").index[:100])
    # also throw in the KO genes in case they are not in the list
    large_genes += genes
    large_genes = sorted(set(large_genes))

    with Pool(20) as p:
        p.starmap(calc_pearson, [(df.xs(g, axis=1, level=1, drop_level=False).loc[large_genes], g, large_genes) for g in systems])